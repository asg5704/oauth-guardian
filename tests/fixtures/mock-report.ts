import { Severity, CheckCategory, CheckStatus } from "../../src/types";

export const reportFixture = {
  metadata: {
    targetUrl: "https://example.com",
    startTime: new Date("2025-01-01T00:00:00Z"),
    endTime: new Date("2025-01-01T00:00:01Z"),
    executionTime: 1000,
    version: "0.1.0",
    config: { target: "https://example.com" },
  },
  summary: {
    totalChecks: 4,
    passed: 2,
    failed: 1,
    warnings: 1,
    skipped: 0,
    errors: 0,
    bySeverity: {
      [Severity.CRITICAL]: 1,
      [Severity.HIGH]: 0,
      [Severity.MEDIUM]: 0,
      [Severity.LOW]: 0,
      [Severity.INFO]: 0,
    },
    byCategory: {
      [CheckCategory.OAUTH]: 4,
      [CheckCategory.NIST]: 0,
      [CheckCategory.OWASP]: 0,
      [CheckCategory.CUSTOM]: 0,
    },
    riskScore: 20,
    compliancePercentage: 50,
  },
  results: [
    {
      id: "test-pass",
      name: "Passing Check",
      category: CheckCategory.OAUTH,
      status: CheckStatus.PASS,
      description: "A passing check",
      message: "Everything is good",
      timestamp: new Date("2025-01-01T00:00:00Z"),
      executionTime: 100,
    },
    {
      id: "test-fail",
      name: "Failing Check",
      category: CheckCategory.OAUTH,
      status: CheckStatus.FAIL,
      severity: Severity.CRITICAL,
      description: "A failing check",
      message: "Critical issue found",
      remediation: "Fix it now",
      timestamp: new Date("2025-01-01T00:00:00Z"),
      executionTime: 100,
    },
    {
      id: "test-warning",
      name: "Warning Check",
      category: CheckCategory.OAUTH,
      status: CheckStatus.WARNING,
      severity: Severity.LOW,
      description: "A warning check",
      message: "Potential issue",
      remediation: "Consider fixing",
      timestamp: new Date("2025-01-01T00:00:00Z"),
      executionTime: 100,
    },
    {
      id: "test-pass-2",
      name: "Another Passing Check",
      category: CheckCategory.OAUTH,
      status: CheckStatus.PASS,
      description: "Another passing check",
      message: "All good",
      timestamp: new Date("2025-01-01T00:00:00Z"),
      executionTime: 100,
    },
  ],
  findings: [
    {
      check: {
        id: "test-fail",
        name: "Failing Check",
        category: CheckCategory.OAUTH,
        status: CheckStatus.FAIL,
        severity: Severity.CRITICAL,
        description: "A failing check",
        message: "Critical issue found",
        remediation: "Fix it now",
        timestamp: new Date("2025-01-01T00:00:00Z"),
        executionTime: 100,
      },
    },
    {
      check: {
        id: "test-warning",
        name: "Warning Check",
        category: CheckCategory.OAUTH,
        status: CheckStatus.WARNING,
        severity: Severity.LOW,
        description: "A warning check",
        message: "Potential issue",
        remediation: "Consider fixing",
        timestamp: new Date("2025-01-01T00:00:00Z"),
        executionTime: 100,
      },
    },
  ],
  compliance: [
    {
      standard: "OAuth 2.0 / RFC 6749",
      category: CheckCategory.OAUTH,
      totalChecks: 4,
      passed: 2,
      failed: 1,
      compliancePercentage: 50,
      compliant: false,
    },
  ],
};
